statements  : NEWLINE* expr (NEWLINE+ statement)* NEWLINE

statement   : KEYWORD:RETURN expr?
            : KEYWORD:CONTINUE
            : KEYWORD:BREAK
            : expr

expr        : (KEYWORD:VAR|KEYWORD:CONST) IDENTIFIER EQ expr
            : comp-expr ((AND|OR) comp-expr)*

comp-expr   : NOT comp-expr
            : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV|MODUL) factor)*

factor      : (PLUS|MINUS|ROOT|INCREMENT|DECREMENT) factor
            : power

power       : root (POW factor)*

root        : call (ROOT) call

call        : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom        : INT|FLOAT|STRING|IDENTIFIER
            : INT (INCREMENT|DECREMENT)
            : LPAREN expr RPAREN
            : list-expr
            : if-expr
            : for-expr
            : while-expr
            : func-def

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr     : KEYWORD:IF expr LCURLY
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements RCURLY|if-expr-b|if-expr-c)

if-expr-b   : KEYWORD:ELIF expr LCURLY
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements RCURLY|if-expr-b|if-expr-c)

if-expr-c   : KEYWORD:ELSE
              statement
            | (NEWLINE statements RCURLY)

for-expr    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr 
              (KEYWORD:STEP expr)? LCURLY
              expr
            | (NEWLINE statements RCURLY)

while-expr  : KEYWORD:WHILE expr LCURLY
              expr
            | (NEWLINE statements RCURLY)

func-def    : KEYWORD:FUN IDENTIFIER?
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              (ARROW expr)
            | (NEWLINE statements RCURLY)
